#include <ros/ros.h>
#include <crops_msgs/p2pAction.h>
#include <crops_state_machine/SimpleActionState.h>
#include <crops_msgs/manipulatorState.h>
#include <XmlRpcValue.h>
#include <crops_msgs/tcpInfo.h>
#include <crops_msgs/end_effector_command.h>
#include <crops_msgs/EndEffectorStatus.h>
#include <crops_msgs/Multiple_Affordances.h>
#include <string>
#include <tf/transform_listener.h>



#ifndef PEPPERMOVETOFRUITSTARTSTATE_H_
#define PEPPERMOVETOFRUITSTARTSTATE_H_

class Pepper_MoveToFruitStartState : public SimpleActionState<crops_msgs::p2pAction, crops_msgs::p2pGoal>
{
private:
  ros::Publisher manipulator_state_pub_;
  ros::NodeHandle n;
  ros::Publisher PubManipulatorState;
  ros::Publisher end_effector_control;
  ros::Subscriber end_effector_feedback;
  bool xpc_target_;
  bool no_fruit_cut;
  int robot_speed;
  float robot_speed_factor;
  ros::Publisher updateTCPsettings_;
  XmlRpc::XmlRpcValue tcp_pos_;
  bool collisionChecked;
  std::string initial_parent_state;
  std::string collision_parent_state;
  std::string gripperType;
  map<string, boost::any> * data_;
  int grasping_retry_number;

  //end effector related
  struct endeffector_st
  {
    bool fruit_not_removed;
    bool gripping_failed;
    bool fruit_removed;
    bool cutter_ready;
    bool gripping_successful;
    bool gripper_ready;
  };
  endeffector_st end_effector_status;
  crops_msgs::end_effector_command end_effector_command;

public:
  Pepper_MoveToFruitStartState();
  virtual ~Pepper_MoveToFruitStartState();
  void feedbackCb(const crops_msgs::p2pFeedbackConstPtr feedback);
  std::string execute(std::map<std::string, boost::any> * data);
  void ProcessEndEffectorStatus(const crops_msgs::EndEffectorStatus::ConstPtr& msg);
  crops_msgs::Statistics stat_msg_;
  std::string moveArm(map<string, boost::any> * data);
};

#endif /* PEPPERMOVETOFRUITSTARTSTATE_H_ */
