#include <ros/ros.h>
#include <crops_msgs/p2pAction.h>
#include <crops_state_machine/SimpleActionState.h>
#include <crops_msgs/manipulatorState.h>
#include <crops_msgs/end_effector_command.h>
#include <crops_msgs/EndEffectorStatus.h>
//#include <crops_msgs/moveRealArmGoal.h>

#ifndef PEPPER_MOVETOBASKETSTATE_H_
#define PEPPER_MOVETOBASKETSTATE_H_

class Pepper_MoveToBasketState : public SimpleActionState<crops_msgs::p2pAction, crops_msgs::p2pGoal>
{
private:
  bool xpc_target;
  int robot_speed;
  float robot_speed_factor;
  ros::NodeHandle n;
  ros::Publisher PubManipulatorState;
  ros::Publisher end_effector_control;
  ros::Subscriber end_effector_feedback;

  bool collisionChecked;
  XmlRpc::XmlRpcValue fruit_bin_position_;
  //ros::Publisher gripper_control;

  //end effector related
    struct endeffector_st {
  	  bool fruit_not_removed;
  	  bool gripping_failed;
  	  bool fruit_removed;
  	  bool cutter_ready;
  	  bool gripping_successful;
  	  bool gripper_ready;
    };
   endeffector_st end_effector_status;
   crops_msgs::end_effector_command end_effector_command;

public:
  Pepper_MoveToBasketState();
  virtual ~Pepper_MoveToBasketState();
   crops_msgs::p2pGoal determineGoal();
  std::string moveArm();
  void feedbackCb(const crops_msgs::p2pFeedbackConstPtr feedback);
  std::string execute(std::map<std::string, boost::any> * data);
  crops_msgs::Statistics stat_msg_;
  void ProcessEndEffectorStatus(const crops_msgs::EndEffectorStatus::ConstPtr& msg);
};

#endif /* PEPPER_MOVETOBASKETSTATE_H_ */
