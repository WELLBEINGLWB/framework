#include <ros/ros.h>
#include <crops_msgs/Fruits_req.h>
#include <crops_msgs/Multiple_Affordances.h>
#include <crops_state_machine/State.h>
#include <crops_msgs/Statistics.h>
#include <crops_msgs/p2pAction.h>
#include <crops_state_machine/SimpleActionState.h>
#include <crops_msgs/manipulatorState.h>
#include <crops_msgs/pepperSensorySystemMotorAction.h>
#include <crops_msgs/ImageRequest.h>
#include <crops_msgs/ImageAcqStatus.h>
#include <crops_msgs/pepper_stems.h>
#include "std_msgs/String.h"
#include <actionlib/client/simple_action_client.h>
#include <actionlib/client/terminal_state.h>



#ifndef PEPPERDETECTFRUITSTATE_H
#define PEPPERDETECTFRUITSTATE_H

class Pepper_DetectFruitState : public SimpleActionState<crops_msgs::pepperSensorySystemMotorAction, crops_msgs::pepperSensorySystemMotorGoal >
{
private:
  ros::NodeHandle nh_;
  crops_msgs::Multiple_Affordances fruit_message_;
  ros::ServiceClient fruit_clt_;
  crops_msgs::Statistics stat_msg_;
  ros::Publisher  trigger_pub_sr_;
  ros::Publisher  trigger_pub_avt_;
  ros::Publisher  reset_fruit_detection;
  std::string     img_request_topic_sr_;
  std::string     img_request_topic_avt_;
  bool _use_pepper_sensor_rig;
  ros::Subscriber acq_status_sub_sr_;
  ros::Subscriber stem_detection ; 
  crops_msgs::pepper_stems::ConstPtr detected_stems;

public:
  Pepper_DetectFruitState();
  virtual ~Pepper_DetectFruitState();
  void imageAcqSRStatusCallback(const crops_msgs::ImageAcqStatus::ConstPtr &msg);
  void stemDetectionCallback(const crops_msgs::pepper_stems::ConstPtr &msg);
  void printFruits();
  std::string execute(std::map<std::string,boost::any> * data);
};

#endif // PEPPERDETECTFRUITSTATE_H
