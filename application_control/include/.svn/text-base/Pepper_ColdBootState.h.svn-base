/*
 * Pepper_ColdBoot.h
 *
 *  Created on: Mar 28, 2013
 *      Author: jh
 */

#ifndef PEPPER_COLDBOOT_H_
#define PEPPER_COLDBOOT_H_
#include "crops_state_machine/State.h"
#include "ros/ros.h"
#include "diagnostic_msgs/DiagnosticArray.h"
#include <crops_msgs/manipulatorState.h>
#include <XmlRpcValue.h>
#include <crops_msgs/tcpInfo.h>
#include <crops_msgs/ImageRequest.h>
#include <crops_msgs/ImageAcqStatus.h>
#include <crops_msgs/end_effector_command.h>
#include <crops_msgs/EndEffectorStatus.h>

enum
{
  OK, WARN, ERROR, STALE
};

class Pepper_ColdBootState : public State
{
private:
  ros::Subscriber sub_;
  ros::NodeHandle nh_;
  bool system_ready;
  ros::Publisher PubManipulatorState;
  ros::Publisher updateTCPsettings_;
  ros::Publisher trigger_pub_sr_;
  ros::Publisher trigger_pub_avt_;
  ros::Publisher end_effector_control;
  ros::Subscriber end_effector_feedback;
  std::string   img_request_topic_sr_;
  std::string   img_request_topic_avt_;
  XmlRpc::XmlRpcValue tcp_pos_;

  //end effector related
   struct endeffector_st {
 	  bool fruit_not_removed;
 	  bool gripping_failed;
 	  bool fruit_removed;
 	  bool cutter_ready;
 	  bool gripping_successful;
 	  bool gripper_ready;
   };
   endeffector_st end_effector_status;
   crops_msgs::end_effector_command end_effector_command;


public:
  Pepper_ColdBootState();
  //	void chatterCallback(const std_msgs::String::ConstPtr& msg);
  void diagnosticsCallback(const diagnostic_msgs::DiagnosticArray::ConstPtr& msg);
  std::string execute(std::map<std::string, boost::any> * data);
  void ProcessEndEffectorStatus(const crops_msgs::EndEffectorStatus::ConstPtr& msg);

};

#endif /* PEPPER_COLDBOOT_H_ */
