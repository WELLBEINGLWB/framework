/*
* Software License Agreement (BSD License)
*
* Copyright (c) 2014,Ume√• University
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* * Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
* * Redistributions in binary form must reproduce the above
* copyright notice, this list of conditions and the following
* disclaimer in the documentation and/or other materials provided
* with the distribution.
* * Neither the name of Open Source Robotics Foundation nor
* the names of its contributors may be used to endorse or promote
* products derived from this software without specific prior
* written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
* COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Main control program for the Crops project using a state machine
 * This file only contains the state machine. Each state is located in its own file
 *
 * Author Ola Ringdahl, ringdahl@cs.umu.se
 */
#include <ros/ros.h>
#include <crops_state_machine/StateMachine.h>

// include the states
#include "Pepper_ColdBootState.h"
#include "Pepper_SelectFruitState.h"
#include "Pepper_HomeSensorRigState.h"
#include "Pepper_DetectFruitState.h"
#include "Pepper_ErrorState.h"
#include "Pepper_MoveToFruitState.h"
#include "Pepper_MoveToFruitStartState.h"
#include "Pepper_MoveToBasketState.h"
#include "Pepper_MoveArmOutOfWorkspaceState.h"
#include "Pepper_MoveArmIntoWorkspaceState.h"
#include "Pepper_MoveSensorsIntoWorkspaceState.h"
#include "Pepper_MoveSensorsOutOfWorkspaceState.h"
#include "Pepper_CollisionCheckState.h"
#include "Pepper_MoveToHomeState.h"
#include "Pepper_MoveToWaypoint_1.h"
#include "Pepper_MoveToWaypoint_2.h"
#include "Pepper_ReadyState.h"
#include "Pepper_MoveToVisualServoStartState.h"


using std::string;

int main(int argc, char** argv)
{
  ros::init(argc, argv, "main_program");
  ROS_INFO("Main program started with transition file %s", argv[1]);

  // Create State objects
  Pepper_ColdBootState pepper_coldBoot;
  Pepper_SelectFruitState sel;
  Pepper_HomeSensorRigState pepper_homesensorrig;
  Pepper_CollisionCheckState pepper_collisioncheck;
  Pepper_DetectFruitState pepper_detectfruit;
  Pepper_MoveToFruitState pepper_movetofruit;
  Pepper_MoveToFruitStartState pepper_movetofruitstart;
  Pepper_MoveToBasketState pepper_movetobasket;
  Pepper_MoveArmOutOfWorkspaceState pepper_movearmoutofworkspace;
  Pepper_MoveArmIntoWorkspaceState pepper_movearmintoworkspace;
  Pepper_MoveSensorsIntoWorkspaceState pepper_movesensorsintoworkspace;
  Pepper_MoveSensorsOutOfWorkspaceState pepper_movesensorsoutofworkspace;
  Pepper_MoveToVisualServoStartState pepper_movetovisualservostart;
  Pepper_MoveToHomeState pepper_movetohome;
  Pepper_MoveToWaypoint_1 pepper_movetowaypoint_1;
  Pepper_MoveToWaypoint_2 pepper_movetowaypoint_2;
  Pepper_ReadyState pepper_ready;
  Pepper_ErrorState pepper_error;
  

  // Define an outcome of the state machine (main program will exit)
  string sm_outcome[] = {"Exit"};
  StateMachine sm(sm_outcome, 1);

  // Transitions file (defined in the launchfile)
  sm.addTransitionFile(argv[1]);

  std::string tfile = (std::string)argv[1];

  // Add states to the state machine
  sm.add("PepperColdBoot", &pepper_coldBoot);
  sm.add("PepperHomeSensorRig", &pepper_homesensorrig);
  sm.add("Ready", &pepper_ready);
  sm.add("PepperMoveToHome", &pepper_movetohome);
  sm.add("PepperMoveToWaypoint_1", &pepper_movetowaypoint_1);
  sm.add("PepperMoveToWaypoint_2", &pepper_movetowaypoint_2);
  sm.add("PepperCollisionCheck", &pepper_collisioncheck);
  sm.add("PepperMoveToFruit", &pepper_movetofruit);
  sm.add("PepperMoveToFruitStart", &pepper_movetofruitstart);
  sm.add("PepperMoveToBasket", &pepper_movetobasket);
  sm.add("PepperMoveArmOutOfWorkspace", &pepper_movearmoutofworkspace);
  sm.add("PepperMoveArmIntoWorkspace", &pepper_movearmintoworkspace);
  sm.add("PepperMoveSensorsIntoWorkspace", &pepper_movesensorsintoworkspace);
  sm.add("PepperMoveSensorsOutOfWorkspace", &pepper_movesensorsoutofworkspace);
  sm.add("PepperMoveToVisualServoStart", &pepper_movetovisualservostart);
  sm.add("PepperDetectFruit", &pepper_detectfruit);
  sm.add("PepperSelectFruitState", &sel);
  sm.add("PepperError", &pepper_error);

  sm.execute();

  ROS_INFO("Crops_main finish");

  return 0;
}
