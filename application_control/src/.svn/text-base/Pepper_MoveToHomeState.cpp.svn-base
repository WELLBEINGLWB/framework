/*
* Software License Agreement (BSD License)
*
* (C) 2014 Wageningen University & Research Centre, Wageningen UR Greenhouse Horticulture http://www.wageningenur.nl/greenhousehorticulture 
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* * Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
* * Redistributions in binary form must reproduce the above
* copyright notice, this list of conditions and the following
* disclaimer in the documentation and/or other materials provided
* with the distribution.
* * Neither the name of Open Source Robotics Foundation nor
* the names of its contributors may be used to endorse or promote
* products derived from this software without specific prior
* written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
* COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/*
 * State for moving the arm to a home position (defined in the h-file)
 *
 * Author Ola Ringdahl, ringdahl@cs.umu.se
 */

#include "Pepper_MoveToHomeState.h"

using std::string;
using std::map;

Pepper_MoveToHomeState::Pepper_MoveToHomeState() :
    SimpleActionState("/p2pAction")
{
  PubManipulatorState = n.advertise<crops_msgs::manipulatorState>("setManipulatorMode", 1000);
  //check if xpc_simulator or xpcTarget Hardware should be used
  ros::param::get("/crops_manipulator_udp/xpc_target", xpc_target_);
  nh_.getParam("home_position", home_pos_);

}

Pepper_MoveToHomeState::~Pepper_MoveToHomeState()
{
}

/**
 * Feedback from the arm
 */
void Pepper_MoveToHomeState::homeFeedbackCb(const crops_msgs::p2pFeedbackConstPtr feedback)
{
  ROS_INFO("#GUI Progress: %.0f %%", feedback->progress * 100);
}

/**
 * Move the arm to 'home' position to move it out of the way of the camera(s)
 */
string Pepper_MoveToHomeState::execute(map<string, boost::any> * data)
{
  string outcome;
  if (first_)
  {
    // check that all values are doubles:
    for (int32_t i = 0; i < home_pos_.size(); ++i)
    {
      ROS_ASSERT(home_pos_[i].getType() == XmlRpc::XmlRpcValue::TypeDouble);
    }
    goal_.goal_pose.position.x = home_pos_[0];
    goal_.goal_pose.position.y = home_pos_[1];
    goal_.goal_pose.position.z = home_pos_[2];
    goal_.goal_pose.orientation.x = home_pos_[3];
    goal_.goal_pose.orientation.y = home_pos_[4];
    goal_.goal_pose.orientation.z = home_pos_[5];
    goal_.goal_pose.orientation.w = home_pos_[6];
    goal_.desired_time = 5;
    goal_.use_hardware = xpc_target_;
    goal_.pathMode = 0;
    ROS_INFO(
        "# GUI moveToHomeState moves to position (%.2f %.2f %.2f) ", goal_.goal_pose.position.x, goal_.goal_pose.position.y, goal_.goal_pose.position.z);
    setFeedbackCallback(boost::bind(&Pepper_MoveToHomeState::homeFeedbackCb, this, _1));
    //sleep(3);
    sendGoal();
    //sleep(1);
    first_ = false;
  }

  actionlib::SimpleClientGoalState current_state_ = ac_.getState();

  switch (current_state_.state_)
  {
    case actionlib::SimpleClientGoalState::SUCCEEDED:
      first_ = true;
      if (ac_.getResult()->reached_goal)
      {
        ROS_INFO("#GUI Arm has reached home position");
        outcome = "HomePositionReached";
      }
      else
      {
        ROS_WARN("#GUI clientState not succeeded!!");
      }

      break;

    case actionlib::SimpleClientGoalState::PREEMPTED:
      ROS_WARN("#GUI Arm could not reach home position");
      first_ = true;
      outcome = "Error";
      break;

    default:
      outcome = "Moving";
      break;
  }
  return outcome;
}
