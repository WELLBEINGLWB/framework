/*
* Software License Agreement (BSD License)
*
* (C) 2014 Wageningen University & Research Centre, Wageningen UR Greenhouse Horticulture http://www.wageningenur.nl/greenhousehorticulture
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* * Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
* * Redistributions in binary form must reproduce the above
* copyright notice, this list of conditions and the following
* disclaimer in the documentation and/or other materials provided
* with the distribution.
* * Neither the name of Open Source Robotics Foundation nor
* the names of its contributors may be used to endorse or promote
* products derived from this software without specific prior
* written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
* COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * State for simulating the arm movement to any movement in order to check for collisions.
 *
 * Author Ruud Barth, ruud.barth@wur.nl
 */

#include "Pepper_CollisionCheckState.h"

using std::string;
using std::map;

Pepper_CollisionCheckState::Pepper_CollisionCheckState() :
    SimpleActionState("/p2pAction")
{
  PubManipulatorState = n.advertise<crops_msgs::manipulatorState>("setManipulatorMode", 1000);
  ros::param::get("/crops_manipulator_udp/xpc_target", xpc_target_);
}

Pepper_CollisionCheckState::~Pepper_CollisionCheckState()
{

}

void Pepper_CollisionCheckState::feedbackCb(const crops_msgs::p2pFeedbackConstPtr feedback)
{
  ROS_INFO("#GUI Progress: %.0f %%", feedback->progress * 100);
}

string Pepper_CollisionCheckState::execute(map<string, boost::any> * data)
{

  string outcome;

  if (first_)
  {
    first_ = false;

    // Determine the previous state.
    // Based on this information, different input for the collision checks are determined and
    // different state transitions are made.
    std::string parent_state = boost::any_cast<std::string>((*data)["collision_parent_state"]);

    // Depending on the parent state, different goals are provided and different
    // outcome states are required.
    // Determines which outcome message needs to be published. This is
    // based on the parent state. For example, if the previous state
    // of this state was PepperDetectFruitState, then a successful
    // collision check should publish the state specific outcome
    // message NoCollision->PepperMoveToFruit.
    if(parent_state == "PepperMoveArmIntoWorkspace")
    {	
      ROS_INFO("#GUI Checking Collision for PepperMoveArmIntoWorkspace.");
      outcome_when_success = "NoCollision->PepperMoveArmIntoWorkspace";
    }else{
    if(parent_state == "PepperMoveArmOutOfWorkspace")
    {
      ROS_INFO("#GUI Checking Collision for PepperMoveArmOutOfWorkspace.");
      outcome_when_success = "NoCollision->PepperMoveArmOutOfWorkspace";
    }else{
    if(parent_state == "PepperMoveToBasket")
    {
      ROS_INFO("#GUI Checking Collision for PepperMoveToBasket.");
      outcome_when_success = "NoCollision->PepperMoveToBasket";
    }else{
    if(parent_state == "PepperMoveToFruit")
    {
      ROS_INFO("#GUI Checking Collision for PepperMoveToFruit.");
      outcome_when_success = "NoCollision->PepperMoveToFruit";
    }else{
    if(parent_state == "PepperMoveToHome")
    {
      ROS_INFO("#GUI Checking Collision for PepperMoveToHome.");
      outcome_when_success = "NoCollision->PepperMoveToHome";
    }else{
    if(parent_state == "PepperMoveToVisualServoStart")
    {
      ROS_INFO("#GUI Checking Collision for PepperMoveToVisualServoStart.");
      outcome_when_success = "NoCollision->PepperMoveToVisualServoStart";
    }else{
    if(parent_state == "PepperMoveToFruitServoStart")
//    if(parent_state == "PepperMoveToVisualServoStart")
    {
      ROS_INFO("#GUI Checking Collision for PepperMoveToFruitStart.");
      outcome_when_success = "NoCollision->PepperMoveToFruitStart";
    }else
      ROS_WARN("#GUI Not checking collision properly: parent state unknown.");
    }}}}}}	
 

    // Get the curretn goal that was set the parent state
    crops_msgs::p2pGoal goal = boost::any_cast<crops_msgs::p2pGoal>((*data)["arm_goal"]);

    goal_ = goal;
    goal_.use_hardware = false;

    setFeedbackCallback(boost::bind(&Pepper_CollisionCheckState::feedbackCb, this, _1));
    sendGoal();
  }


  actionlib::SimpleClientGoalState current_state_ = ac_.getState();
  switch (current_state_.state_)
  {

    case actionlib::SimpleClientGoalState::SUCCEEDED:

      first_ = true;
      goal_.use_hardware = xpc_target_;
      goal_.desired_time = 5;

      if (ac_.getResult()->reached_goal)
      {
        ROS_INFO("#GUI Collision Simulation Done: No Collision Detected");
        ROS_INFO("Outcome: %s", outcome_when_success.c_str());
        outcome = outcome_when_success;
      }
      else
      {
        ROS_WARN("#GUI Collision Detected");
	outcome = "Collision";
      }
      break;

    case actionlib::SimpleClientGoalState::RECALLED:
      ROS_WARN("#GUI Collision Detected");
      first_ = true;
      goal_.use_hardware = xpc_target_;
      goal_.desired_time = 5;
      outcome = "Collision";
      break;

    case actionlib::SimpleClientGoalState::REJECTED:
      ROS_WARN("#GUI Collision Detected");
      first_ = true;
      goal_.use_hardware = xpc_target_;
      goal_.desired_time = 5;
      outcome = "Collision";
      break;

    case actionlib::SimpleClientGoalState::LOST:
      ROS_WARN("#GUI Collision Detected");
      first_ = true;
      goal_.use_hardware = xpc_target_;
      goal_.desired_time = 5;
      outcome = "Collision";
      break;

    case actionlib::SimpleClientGoalState::PREEMPTED:
      ROS_WARN("#GUI Collision Detected");
      first_ = true;
      goal_.use_hardware = xpc_target_;
      goal_.desired_time = 5;
      outcome = "Collision";
      break;

    case actionlib::SimpleClientGoalState::ACTIVE:
      outcome = "CheckingCollision";
      break;

    case actionlib::SimpleClientGoalState::PENDING:
      outcome = "CheckingCollision";
      break;

    default:
      ROS_WARN("#GUI Wrong feedback by manipulator. Default 'collision' triggered.");
      first_ = true;
      outcome = "Collision";
      break;
  }
  return outcome;

}
