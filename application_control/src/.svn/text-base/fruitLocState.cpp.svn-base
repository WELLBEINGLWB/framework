/*
* Software License Agreement (BSD License)
*
* Copyright (c) 2014,Ume√• University
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* * Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
* * Redistributions in binary form must reproduce the above
* copyright notice, this list of conditions and the following
* disclaimer in the documentation and/or other materials provided
* with the distribution.
* * Neither the name of Open Source Robotics Foundation nor
* the names of its contributors may be used to endorse or promote
* products derived from this software without specific prior
* written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
* COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

#include "fruitLocState.h"

/**
 * Constructor
 */
FruitLocState::FruitLocState()
{
  fruit_clt_ = nh_.serviceClient<crops_msgs::Fruits_req>("fruit_request");
}

FruitLocState::~FruitLocState()
{
}

/**
 * Make a service request to the fruit localization node to get a list of fruits.
 */
std::string FruitLocState::execute(std::map<std::string, boost::any> * data)
{
  crops_msgs::Fruits_req srv;
  if (fruit_clt_.call(srv))
  {
    fruit_message_ = srv.response.fruit_list;
    // Send the fruit message back to the state machine (so other states can use it):
    (*data)["fruit"] = fruit_message_;
    printFruits(); // Print out all fruit coordinates on screen
    stat_msg_.fruit_count = fruit_message_.NumberOfFruits;
    stat_pub_.publish(stat_msg_);
    return "Found fruit";
  }
  else
  {
    ROS_ERROR("Failed to call service Fruits_req");
    return "No fruit";
  }
}

/**
 * Display the location of the fruits on screen
 */
void FruitLocState::printFruits()
{

  ROS_INFO("%s reports:", getStateName().c_str());
  int fruit_count = fruit_message_.NumberOfFruits;
  double x[fruit_count], y[fruit_count], z[fruit_count];
  ROS_INFO("#GUI Number of fruits localized: %d", fruit_count);
  double age = ros::Time::now().toSec() - fruit_message_.header.stamp.toSec();
  ROS_INFO("Message age %.3f s:", age);
  for (int i = 0; i < fruit_count; i++)
  {
    x[i] = fruit_message_.Multiple_Fruits[i].poses[0].position.x;
    y[i] = fruit_message_.Multiple_Fruits[i].poses[0].position.y;
    z[i] = fruit_message_.Multiple_Fruits[i].poses[0].position.z;
    ROS_INFO("Fruits at location: (%.2f %.2f %.2f)", x[i], y[i], z[i]);
  }
  ROS_INFO("--------------------");
  // Wait for a bit if we want to loop this message
  ros::Duration(0.1).sleep();

}

