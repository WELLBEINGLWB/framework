/*
* Software License Agreement (BSD License)
*
* Copyright (c) 2014,Ume√• University
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* * Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
* * Redistributions in binary form must reproduce the above
* copyright notice, this list of conditions and the following
* disclaimer in the documentation and/or other materials provided
* with the distribution.
* * Neither the name of Open Source Robotics Foundation nor
* the names of its contributors may be used to endorse or promote
* products derived from this software without specific prior
* written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
* COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/*
 * ColdBoot.cpp
 *
 *  Created on: Apr 12, 2012
 *  Author: Peter Hohnloser
 */

#include "ColdBootState.h"

ColdBootState::ColdBootState()
{
  system_ready = false;
  sub_ = nh_.subscribe("diagnostics_agg", 1, &ColdBootState::diagnosticsCallback, this);
}

/**
 * Callback function for diagnostic messages. Gets called everytime a new diagnostics_agg message arrives
 */
void ColdBootState::diagnosticsCallback(const diagnostic_msgs::DiagnosticArray::ConstPtr& msg)
{
  int max = OK;
  std::vector<diagnostic_msgs::DiagnosticStatus> sts = msg->status;
  for (std::vector<diagnostic_msgs::DiagnosticStatus>::iterator iter = sts.begin(); iter != sts.end(); iter++)
  {
    if (iter->level > max)
      max = iter->level;
  }
  system_ready = false;
  if (max == OK)
  {
    system_ready = true;
  }
}

std::string ColdBootState::execute(std::map<std::string, boost::any> * data)
{
  if (system_ready)
  {
    system_ready = false;
    ROS_INFO("#GUI System ready");
    return "System ready";
  }
  return "System not ready";
}
