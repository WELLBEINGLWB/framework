/*
* Software License Agreement (BSD License)
*
* Copyright (c) 2014,Ume√• University
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* * Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
* * Redistributions in binary form must reproduce the above
* copyright notice, this list of conditions and the following
* disclaimer in the documentation and/or other materials provided
* with the distribution.
* * Neither the name of Open Source Robotics Foundation nor
* the names of its contributors may be used to endorse or promote
* products derived from this software without specific prior
* written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
* COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * State for localizing fruits, using the dummy fruit localization node
 * author Ola Ringdahl, ringdahl@cs.umu.se
 */
#include "motionPlanningState.h"

/**
 * Constructor
 */
MotionPlanningState::MotionPlanningState()
{
  motion_planning_clt_ = nh_.serviceClient<crops_msgs::MotionPlannerReq> ("motion_plan_request");
}

MotionPlanningState::~MotionPlanningState()
{
}

/**
 * Make a service request to the path planning node to get a list of path coordinates
 */
std::string MotionPlanningState::execute(std::map<std::string, boost::any> * data)
{
  crops_msgs::MotionPlannerReq srv;
  crops_msgs::moveRealArmGoal goal = boost::any_cast<crops_msgs::moveRealArmGoal>((*data)["arm_goal"]);
  srv.request.goalPoint.position = goal.move2goal.pose.position;
  srv.request.goalPoint.orientation = goal.move2goal.pose.orientation;
  if (motion_planning_clt_.call(srv))
  {
    // save the path points in the state machine (as a geometry_msgs::PoseArray)
    (*data)["path_plan"] = srv.response.pathPoints;
    return "Found_fruit";
  }
  else
  {
    ROS_ERROR("Failed to call service Fruits_req");
    return "No fruit";
  }
}




