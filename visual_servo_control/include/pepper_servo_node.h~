#ifndef visual_servo_control_node_H
#define visual_servo_control_node_H


#include "ros/ros.h"
#include <tf/transform_broadcaster.h>
#include "std_msgs/String.h"
#include "HalconCpp.h"
#include "HDevEngineCpp.h"
#include <visual_servo_control/request_servo_velocity_vector.h>
#include "window_handling.h"
#include <vector> 
#include <visualization_msgs/MarkerArray.h>
#include <visualization_msgs/Marker.h>
#include <visp/vpFeatureBuilder.h>
#include <visp/vpServo.h>
#include <visp/vpSimulatorCamera.h>



#include <visp/vpConfig.h>
#include <visp/vpDebug.h> 
#include <stdlib.h>

#include <visp/vp1394TwoGrabber.h>
#include <visp/vpImage.h>
#include <visp/vpImagePoint.h>


#include <visp/vpMath.h>
#include <visp/vpHomogeneousMatrix.h>
#include <visp/vpFeaturePoint.h>
#include <visp/vpPoint.h>
#include <visp/vpServo.h>
#include <visp/vpFeatureBuilder.h>
#include <visp/vpRobotAfma4.h>
#include <visp/vpIoTools.h>

#include <visp/vpException.h>
#include <visp/vpMatrixException.h>
#include <visp/vpServoDisplay.h>

#include <visp/vpDot.h>



/*°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
              The global variables in this frame are used in the HDevEngine.     
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°*/
HDevEngineCpp::HDevEngine hdevengine;
HDevEngineCpp::HDevProgram hdev_script;
HDevEngineCpp::HDevProgramCall script_results;

std::string halcon_script_path;
std::string halcon_external_procedures_path;
std::string camera_parameters_path;

std::string initialize_camera_function;
std::string grab_rectified_image_function;
std::string find_points_function;
std::string find_cog_caltab_function;
std::string display_grabbed_image;
std::string close_frame_grabber_function;

std::string test;


HalconCpp::HTuple camera_parameters;
bool camera_parameters_loaded;

HalconCpp::HTuple camera_acquisition_handle;
HalconCpp::HImage last_image;

HTuple point_1_x;
HTuple point_2_x;
HTuple point_3_x;
HTuple point_4_x;
HTuple point_1_y;
HTuple point_2_y;
HTuple point_3_y;
HTuple point_4_y;

HTuple cog_x;
HTuple cog_y;
/*‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡*/




/*°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
              The global variables in this frame are  for the servo simulation   
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°*/
bool initialized;
bool program_lock;
bool simulation_initialized;
bool servo_initialized;

// Here we define the desired and initial/current position of the camera as two homogeneous matrices
// Initial is not allowed to be all zero.

// Desired pose camera relative to object. In other words, target pose of camera relative to object.
vpHomogeneousMatrix cdMo(0, 0, 0.01, 0, 0, 0); 

// Actual pose camera relative object. In other words, position of object in camera frame is known.
vpHomogeneousMatrix cMo(0.15, -0.1, 1,vpMath::rad(10), vpMath::rad(-10), vpMath::rad(50));

// For the simulation we need to create two homogeneous transformations wMc and wMo, 
// respectively to define the position of the camera, and the position of the object in 
// the world frame.
 
// Position of camera in world frame (get from robot).
vpHomogeneousMatrix wMc;

// Position of the object in world frame. 
vpHomogeneousMatrix wMo;


vpPoint point[4];
vpServo task;
vpFeaturePoint p[4], pd[4];
vpFeaturePoint p_cog, pd_cog;
int iteration;
                            
// We create an instance of a free flying camera. 
vpSimulatorCamera robot;

// Current position and orientation of simulated camera.
tf::Vector3    simulated_camera_position;
tf::Quaternion simulated_camera_rotation;
/*‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡*/





/*°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
                          Global publishers and Subscribers of the ROS node   
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°*/
ros::Publisher           goal_marker_publisher;
ros::ServiceServer       velocity_vector_output_service;
/*‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡*/





/*°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
                              All functions within this ros node.
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°*/
bool getVelocityVector_CalTab(pepper_servo_package::request_servo_velocity_vector::Request &req, pepper_servo_package::request_servo_velocity_vector::Response &res);
bool simulateVelocityVectorCalculation(pepper_servo_package::request_servo_velocity_vector::Request &req, pepper_servo_package::request_servo_velocity_vector::Response &res);

void initializeCamera();
void grabRectifiedImage();
void findCogCaltab();
void findPoints();
void displayGrabbedImage();
void closeFrameGrabber();

void initializeHalconScripts();

int main(int argc, char **argv);
/*‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡‡*/


#endif
